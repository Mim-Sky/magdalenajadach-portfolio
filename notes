Since 2012, the getUserMedia API has been supported by Google Chrome, Firefox and Opera, both on desktops and mobile devices, but you still need to use the prefixed version of the API (i.e. call webkitGetUserMedia or mozGetUserMedia instead of getuserMedia). While Internet Explorer does not support it, it's coming soon to Microsoft Edge, IE's successor, as announced by Microsoft. 


getUserMedia?

A JavaScript API that can be used to redirect the webcam video stream to a video element A JavaScript API that can be used to redirect the webcam video stream to a video element - correct

Take a snapshot
 <p>
  <button onclick="startWebcam();">Start WebCam</button>
  <button onclick="stopWebcam();">Stop WebCam</button> 
     <button onclick="snapshot();">Take Snapshot</button> 
  </p>


  Working with the microphone

Instead of using the getUserMedia API with: navigator.getUserMedia({video:true}, onSuccess, onError), it is also possible to use {audio:true} for the first parameter. In that case, only the microphone input will be captured. Notice that {video:true, audio:true} is also accepted, if you write a video conferencing system and need to capture both the audio and the video (this is often the case when writing WebRTC applications). The W3C WebRTC is another W3C specification, under development, for P2P audio/video/data Real Time Communication.

How to set the webcam resolution

Note that as of June 2015, this only works with Google Chrome, but should come soon
on the other browsers that support the getUserMedia API.

var canvas, ctx, grdFrenchFlag;

function init() {
  // Good practice 1: set global vars  canvas, ctx, gradients, etc here
   canvas = document.querySelector('#myCanvas1');
   ctx = canvas.getContext('2d');
  
   // The gradient we create is also a global variable, we
   // will be able to reuse it for drawing different shapes
   // in different functions
  grdFrenchFlag = ctx.createLinearGradient(0, 0, 300, 200);
              
  // Try adding colors with first parameter between 0 and 1
  grdFrenchFlag.addColorStop(0, "blue"); 
  grdFrenchFlag.addColorStop(0.5, "white");
  grdFrenchFlag.addColorStop(1, "red"); 

  drawCheckboard(5);
}

// n = number of cells per row/column
function drawCheckboard(n) {
  ctx.fillStyle = grdFrenchFlag;
  
  var l = canvas.width;
  var h = canvas.height;

  var cellWidth = l / n;
  var cellHeight = h / n;
  
  for(i = 0; i < n; i+=2) {
    for(j = 0; j < n; j++) {
      ctx.fillRect(cellWidth*(i+j%2), cellHeight*j, cellWidth, cellHeight); 
    }  
  }
}